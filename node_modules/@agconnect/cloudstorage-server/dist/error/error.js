"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertErrorCode = exports.quotaExceeded = exports.objectNotFound = exports.noPermission = exports.authFailed = exports.shaNotMatch = exports.bucketNotFound = exports.simpleUploadErr = exports.generateTokenError = exports.fileDeleteError = exports.invalidCredential = exports.invalidCorsConfig = exports.invalidBucketMetadata = exports.invalidFileString = exports.parseDestinationStringError = exports.invalidDestinationString = exports.invalidDestination = exports.invalidBucketString = exports.invalidBucket = exports.Code = exports.StorageError = void 0;
var common_server_1 = require("@agconnect/common-server");
var StorageError = /** @class */ (function (_super) {
    __extends(StorageError, _super);
    function StorageError(errorCode) {
        return _super.call(this, errorCode, 'AGCCloudStorageError') || this;
    }
    return StorageError;
}(common_server_1.AGCError));
exports.StorageError = StorageError;
exports.Code = {
    UNKNOWN_ERROR: '20001',
    INVALID_DESTINATION: '20002',
    INVALID_DESTINATION_STRING: '20003',
    INVALID_FILE_STRING: '20004',
    INVALID_BUCKET_METADATA: '20005',
    INVALID_CORS_CONFIG: '20006',
    INVALID_CREDENTIAL: '20007',
    INVALID_BUCKET_STRING: '20008',
    SHA256_NOT_MATCH: '20009',
    BAD_SERVER_RESPONSE: '20010',
    AUTH_FAILED: '20011',
    NO_PERMISSION: '20012',
    OBJECT_NOT_FOUND: '20013',
    QUOTA_EXCEEDED: '20014',
    BUCKET_NOT_FOUND: '20015',
    FILE_DELETE_ERR: '20016',
    DESTINATION_PARSE_ERR: '20017',
    GENERATE_TOKEN_ERR: '20018',
    SIMPLE_UPLOAD_LIMIT_ERR: '20019'
};
function invalidBucket(func) {
    var message = func + 'Invalid bucket name. Enter 3 to 57 characters, limited to lowercase letters, digits, and hyphens (-), and starting and ending with a digit or letter.';
    return new StorageError({ code: exports.Code.INVALID_BUCKET_STRING, message: message });
}
exports.invalidBucket = invalidBucket;
function invalidBucketString(func) {
    var message = func + 'Invalid bucket name. Enter 3 to 63 characters, limited to lowercase letters, digits, and hyphens (-), and starting and ending with a digit or letter.';
    return new StorageError({ code: exports.Code.INVALID_BUCKET_STRING, message: message });
}
exports.invalidBucketString = invalidBucketString;
function invalidDestination(func) {
    var message = func + 'Invalid destination. Destination must be string | Bucket | File.';
    return new StorageError({ code: exports.Code.INVALID_DESTINATION, message: message });
}
exports.invalidDestination = invalidDestination;
function invalidDestinationString(func) {
    var message = func + 'Invalid destination. The following special characters are not permitted: # * : ? \\ \' " < > | [ ] .';
    return new StorageError({ code: exports.Code.INVALID_DESTINATION_STRING, message: message });
}
exports.invalidDestinationString = invalidDestinationString;
function parseDestinationStringError() {
    var message = 'Parse destination failed. The characters must meet the format requirements: {desBucket}/{desName}';
    return new StorageError({ code: exports.Code.DESTINATION_PARSE_ERR, message: message });
}
exports.parseDestinationStringError = parseDestinationStringError;
function invalidFileString(func) {
    var message = func + 'Invalid file name. The following special characters are not permitted: # * : ? \\ \' " < > | [ ] .';
    return new StorageError({ code: exports.Code.INVALID_FILE_STRING, message: message });
}
exports.invalidFileString = invalidFileString;
function invalidBucketMetadata(func) {
    var message = func + 'Invalid bucket metadata. Param cors cannot be null.';
    return new StorageError({ code: exports.Code.INVALID_BUCKET_METADATA, message: message });
}
exports.invalidBucketMetadata = invalidBucketMetadata;
function invalidCorsConfig(func) {
    var message = func + 'Invalid cors config. Cors config cannot be null.';
    return new StorageError({ code: exports.Code.INVALID_CORS_CONFIG, message: message });
}
exports.invalidCorsConfig = invalidCorsConfig;
function invalidCredential() {
    var message = 'Get configuration from credential failed. Please check your credential file again.';
    return new StorageError({ code: exports.Code.INVALID_CREDENTIAL, message: message });
}
exports.invalidCredential = invalidCredential;
function fileDeleteError() {
    var message = 'Delete file failed. Please try again.';
    return new StorageError({ code: exports.Code.FILE_DELETE_ERR, message: message });
}
exports.fileDeleteError = fileDeleteError;
function generateTokenError() {
    var message = 'Generate token failed. Please check your credential file and try again.';
    return new StorageError({ code: exports.Code.GENERATE_TOKEN_ERR, message: message });
}
exports.generateTokenError = generateTokenError;
function simpleUploadErr() {
    var message = 'The maximum size of a file to be uploaded each time cannot exceed 2 GB.';
    return new StorageError({ code: exports.Code.SIMPLE_UPLOAD_LIMIT_ERR, message: message });
}
exports.simpleUploadErr = simpleUploadErr;
function bucketNotFound() {
    return {
        code: exports.Code.BUCKET_NOT_FOUND,
        message: 'Bucket not found. Please check your bucketName again.'
    };
}
exports.bucketNotFound = bucketNotFound;
function shaNotMatch() {
    return {
        code: exports.Code.SHA256_NOT_MATCH,
        message: 'Failed to verify the object hash. Please check sha256 again or try again.'
    };
}
exports.shaNotMatch = shaNotMatch;
function authFailed() {
    return {
        code: exports.Code.AUTH_FAILED,
        message: 'Identity authentication failed. Please check your credential file and try again.'
    };
}
exports.authFailed = authFailed;
function noPermission() {
    return {
        code: exports.Code.NO_PERMISSION,
        message: 'You don\'t have permission to access the file or directory'
    };
}
exports.noPermission = noPermission;
function objectNotFound() {
    return {
        code: exports.Code.OBJECT_NOT_FOUND,
        message: 'The object doesn\'t exist.'
    };
}
exports.objectNotFound = objectNotFound;
function quotaExceeded() {
    return {
        code: exports.Code.QUOTA_EXCEEDED,
        message: 'The quota of the bucket has been used up. Please check the payment plan.'
    };
}
exports.quotaExceeded = quotaExceeded;
function convertErrorCode(statusCode, retCode, data) {
    switch (statusCode) {
        case 500:
        case 400:
            if (retCode === 135003 || data === 'Bucket not exist') {
                return bucketNotFound();
            }
            else if (retCode === 131009) {
                return shaNotMatch();
            }
            return {
                code: exports.Code.BAD_SERVER_RESPONSE,
                message: 'Bad server response. Please try again.'
            };
        case 401:
            return authFailed();
        case 403:
            return noPermission();
        case 404:
            return objectNotFound();
        case 409:
            return shaNotMatch();
        case 507:
            return quotaExceeded();
        default:
            return {
                code: exports.Code.UNKNOWN_ERROR,
                message: 'Unknown error occurred.'
            };
    }
}
exports.convertErrorCode = convertErrorCode;
