"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpMethod = exports.generateRes = exports.rawRequest = exports.request = exports.generateAuth = void 0;
var agconnect = __importStar(require("@agconnect/common-server"));
var common_log_1 = require("../utils/common-log");
var config_1 = require("../config/config");
var uuid = __importStar(require("uuid"));
var constants_1 = require("../impl/constants");
var error_1 = require("../error/error");
function generateAuth() {
    return __awaiter(this, void 0, void 0, function () {
        var token;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    token = '';
                    return [4 /*yield*/, agconnect.AGCClient.getInstance().getCredential().getAccessToken().then(function (data) {
                            token = data;
                        })];
                case 1:
                    _a.sent();
                    if (token === '') {
                        common_log_1.logger.error('refresh token failed.');
                        throw error_1.generateTokenError();
                    }
                    return [2 /*return*/, 'Bearer ' + token];
            }
        });
    });
}
exports.generateAuth = generateAuth;
function request(methodType, requestUri, data, requestParams, requestHeaders, streamRes) {
    var _this = this;
    var autoRetry = config_1.Config.getInstance().autoRetry;
    var maxRetries = config_1.Config.getInstance().maxRetries;
    var firstTime = true;
    var retryTime = 1;
    return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
        var _loop_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _loop_1 = function () {
                        var lastTime;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    lastTime = retryTime === maxRetries;
                                    firstTime = false;
                                    return [4 /*yield*/, rawRequest(methodType, requestUri, data, requestParams, requestHeaders, streamRes)
                                            .then(function (res) {
                                            resolve(res);
                                            retryTime = maxRetries + 1;
                                            return;
                                        })
                                            .catch(function (err) {
                                            var _a, _b, _c;
                                            if (!autoRetry) {
                                                reject(error_1.convertErrorCode((_a = err.response) === null || _a === void 0 ? void 0 : _a.status, err.headers, err.response.data));
                                                return;
                                            }
                                            else {
                                                common_log_1.logger.error('Request ' + retryTime + ' time/times failed.');
                                                retryTime += 1;
                                                if (lastTime) {
                                                    reject(error_1.convertErrorCode((_b = err.response) === null || _b === void 0 ? void 0 : _b.status, err.headers, (_c = err.response) === null || _c === void 0 ? void 0 : _c.data));
                                                    return;
                                                }
                                            }
                                        })];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    };
                    _a.label = 1;
                case 1:
                    if (!(firstTime || (autoRetry && retryTime <= maxRetries))) return [3 /*break*/, 3];
                    return [5 /*yield**/, _loop_1()];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    }); });
}
exports.request = request;
function rawRequest(methodType, requestUri, data, requestParams, requestHeaders, streamRes) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, generateAuth().then(function (auth) {
                    var authHeader = {
                        'Authorization': auth,
                        'client_id': config_1.Config.getInstance().clientId,
                        'productId': config_1.Config.getInstance().productId,
                        'X-Agc-Trace-Id': uuid.v1()
                    };
                    var header = Object.assign(authHeader, requestHeaders);
                    var baseUrl = config_1.Config.getInstance().storageHost;
                    var url = baseUrl + requestUri;
                    var timeout = config_1.Config.getInstance().timeout;
                    var httpClient;
                    if (streamRes) {
                        httpClient = agconnect.getHttpClient({
                            responseType: 'stream',
                            maxBodyLength: constants_1.DEFAULT_MAX_BODY_LENGTH,
                            maxContentLength: constants_1.DEFAULT_MAX_CONTENT_LENGTH,
                            timeout: timeout
                        });
                    }
                    else {
                        httpClient = agconnect.getHttpClient({
                            maxBodyLength: constants_1.DEFAULT_MAX_BODY_LENGTH,
                            maxContentLength: constants_1.DEFAULT_MAX_CONTENT_LENGTH,
                            timeout: timeout
                        });
                    }
                    switch (methodType) {
                        case HttpMethod.GET:
                            return httpClient.get(url, requestParams, header);
                        case HttpMethod.POST:
                            return httpClient.post(url, data, requestParams, header);
                        case HttpMethod.PUT:
                            return httpClient.put(url, data, requestParams, header);
                        case HttpMethod.DELETE:
                            return httpClient.delete(url, data, requestParams, header);
                        default:
                            break;
                    }
                    common_log_1.logger.error('Unsupported request method.');
                    return null;
                })];
        });
    });
}
exports.rawRequest = rawRequest;
/**
 * Collect all response body from axios response
 */
function generateRes(promise) {
    return new Promise(function (resolve, reject) {
        promise.then(function (res) { return resolve(res.data); })
            .catch(function (err) { return reject(err); });
    });
}
exports.generateRes = generateRes;
var HttpMethod;
(function (HttpMethod) {
    HttpMethod[HttpMethod["GET"] = 0] = "GET";
    HttpMethod[HttpMethod["HEAD"] = 1] = "HEAD";
    HttpMethod[HttpMethod["POST"] = 2] = "POST";
    HttpMethod[HttpMethod["PUT"] = 3] = "PUT";
    HttpMethod[HttpMethod["PATCH"] = 4] = "PATCH";
    HttpMethod[HttpMethod["DELETE"] = 5] = "DELETE";
    HttpMethod[HttpMethod["OPTIONS"] = 6] = "OPTIONS";
    HttpMethod[HttpMethod["TRACE"] = 7] = "TRACE";
})(HttpMethod = exports.HttpMethod || (exports.HttpMethod = {}));
