"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Config = void 0;
var agconnect = __importStar(require("@agconnect/common-server"));
var path_1 = __importDefault(require("path"));
var common_log_1 = require("../utils/common-log");
var constants_1 = require("../impl/constants");
var error_1 = require("../error/error");
var Config = /** @class */ (function () {
    function Config() {
        var _this = this;
        this._autoRetry = constants_1.DEFAULT_AUTO_RETRY;
        this._maxRetries = constants_1.DEFAULT_MAX_RETRIES;
        this._timeout = constants_1.DEFAULT_TIME_OUT;
        this._productId = agconnect.AGCClient.getInstance().getCredential().getProjectId();
        this._clientId = agconnect.AGCClient.getInstance().getCredential().getClientId();
        var region = agconnect.AGCClient.getInstance().getCredential().getRegion();
        if (!region || region === '') {
            common_log_1.logger.error('Get project region failed.');
            throw error_1.invalidCredential();
        }
        var regionConf = agconnect.Configuration.getConfiguration(path_1.default.join(__dirname, './../../agconnect-cloudstorage.json'), 'storage_url');
        regionConf.forEach(function (item) {
            if (item.region === region) {
                _this._storageHost = item.url;
            }
        });
        if (!this._storageHost || this._storageHost === '') {
            common_log_1.logger.error('Init storageHost failed.');
            throw error_1.invalidCredential();
        }
    }
    Config.getInstance = function () {
        if (!this.instance) {
            this.instance = new Config();
        }
        return this.instance;
    };
    Object.defineProperty(Config.prototype, "storageHost", {
        get: function () {
            return this._storageHost;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "productId", {
        get: function () {
            return this._productId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "clientId", {
        get: function () {
            return this._clientId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "autoRetry", {
        get: function () {
            return this._autoRetry;
        },
        set: function (value) {
            this._autoRetry = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "maxRetries", {
        get: function () {
            return this._maxRetries;
        },
        set: function (value) {
            this._maxRetries = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Config.prototype, "timeout", {
        get: function () {
            return this._timeout;
        },
        set: function (value) {
            this._timeout = value;
        },
        enumerable: false,
        configurable: true
    });
    return Config;
}());
exports.Config = Config;
