"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bucket = void 0;
var file_1 = require("./file");
var request_1 = require("../request/request");
var fs = __importStar(require("fs"));
var p_limit_1 = __importDefault(require("p-limit"));
var validator_1 = require("../utils/validator");
var constants_1 = require("./constants");
var path = __importStar(require("path"));
var error_1 = require("../error/error");
var crypto = require('crypto');
var Bucket = /** @class */ (function () {
    function Bucket(storage, name) {
        validator_1.validateBucketNameString('bucket.constructor: ', name);
        this.name = name;
        this.storage = storage;
    }
    Bucket.prototype.create = function (metadata) {
        return this.storage.createBucket(this.name, metadata);
    };
    Bucket.prototype.delete = function () {
        var url = '/v0/';
        var headers = {
            'X-Agc-Bucket-Name': this.name
        };
        return request_1.generateRes(request_1.request(request_1.HttpMethod.DELETE, url, null, null, headers));
    };
    Bucket.prototype.deleteFiles = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var truncated, err, deleteFile;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        truncated = true;
                        options = Object.assign({}, options);
                        deleteFile = function (file) {
                            file.delete().catch(function (err) {
                                if (options.forcePause) {
                                    throw error_1.fileDeleteError();
                                }
                                else {
                                    err.push(err);
                                }
                            });
                        };
                        _a.label = 1;
                    case 1:
                        if (!truncated) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getFiles(options).then(function (res) { return __awaiter(_this, void 0, void 0, function () {
                                var limit, promises;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            options.marker = res.marker;
                                            truncated = !!res.marker;
                                            limit = p_limit_1.default(10);
                                            promises = res.fileList.map(function (file) {
                                                return limit(function () { return deleteFile(file); });
                                            });
                                            return [4 /*yield*/, Promise.all(promises)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }).catch(function (error) {
                                var _a;
                                err.push([(_a = error.response) === null || _a === void 0 ? void 0 : _a.status, error.message]);
                            })];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/, new Promise(function (resovle, reject) {
                            if (!err || err.length === 0) {
                                resovle();
                            }
                            else {
                                reject(err);
                            }
                        })];
                }
            });
        });
    };
    Bucket.prototype.exists = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            ;
            _this.storage.getBuckets().then(function (res) {
                if (res && res.indexOf(_this.name) !== -1) {
                    resolve(true);
                }
                else {
                    reject(false);
                }
            }).catch(function (err) { return reject(err); });
        });
    };
    Bucket.prototype.file = function (name) {
        validator_1.validateFileName('bucket.file: ', name);
        return new file_1.File(this, name);
    };
    Bucket.prototype.getFiles = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, headers, data;
            var _this = this;
            return __generator(this, function (_a) {
                url = '/v0/' + this.name;
                headers = {};
                data = {};
                if (options) {
                    if (options.maxKeys) {
                        Object.assign(data, {
                            'max-keys': Math.min(options.maxKeys, constants_1.DEFAULT_MAX_KEYS)
                        });
                    }
                    if (options.marker) {
                        Object.assign(data, {
                            'marker': options.marker
                        });
                    }
                    if (options.prefix) {
                        Object.assign(data, {
                            'prefix': options.prefix
                        });
                    }
                    if (options.delimiter) {
                        Object.assign(data, {
                            'delimiter': options.delimiter
                        });
                    }
                }
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        request_1.request(request_1.HttpMethod.GET, url, null, data, headers).then(function (res) {
                            if (!res) {
                                resolve({
                                    dirList: [],
                                    fileList: []
                                });
                            }
                            var resource = res.data;
                            var listResult = {
                                dirList: [],
                                fileList: [],
                                marker: resource[MARKER_KEY]
                            };
                            if (resource[Contents_KEY]) {
                                for (var _i = 0, _a = resource[Contents_KEY]; _i < _a.length; _i++) {
                                    var item = _a[_i];
                                    var file = _this.file(item['key']);
                                    listResult.fileList.push(file);
                                }
                            }
                            if (resource[PREFIXES_KEY]) {
                                for (var _b = 0, _c = resource[PREFIXES_KEY]; _b < _c.length; _b++) {
                                    var item = _c[_b];
                                    listResult.dirList.push(item);
                                }
                            }
                            resolve(listResult);
                        }).catch(function (err) {
                            reject(err);
                        });
                    })];
            });
        });
    };
    Bucket.prototype.setCorsConfiguration = function (config) {
        validator_1.validateCorsConfig('bucket.setCorsConfiguration: ', config);
        var url = '/v0/' + this.name + '?cors';
        var headers = {};
        var data = { 'rules': config };
        return request_1.generateRes(request_1.request(request_1.HttpMethod.PUT, url, data, null, headers));
    };
    Bucket.prototype.setMetadata = function (metadata) {
        validator_1.validateBucketMetadata('bucket.setMetadata: ', metadata);
        return this.setCorsConfiguration(metadata.cors);
    };
    Bucket.prototype.upload = function (pathStr, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            options = Object.assign({}, options);
            var stream = fs.createReadStream(pathStr, { emitClose: true });
            var sha256Sum = crypto.createHash('sha256');
            var length = 0;
            stream.on('data', function (data) {
                sha256Sum.update(data);
                length += data.length;
            });
            stream.on('close', function () {
                if (length > constants_1.SIMPLE_UPLOAD_MAX_SIZE) {
                    throw error_1.simpleUploadErr();
                }
                var file;
                if (options.destination instanceof file_1.File) {
                    file = options.destination;
                }
                else if (options.destination !== null && typeof options.destination === 'string') {
                    file = _this.file(options.destination);
                }
                else {
                    // use the same name of the path
                    var des = path.basename(pathStr);
                    file = _this.file(des);
                }
                var writable = file.createWriteStream({
                    size: length,
                    sha256: sha256Sum.digest('hex')
                });
                if (options.onUploadProgress) {
                    writable.on('progress', options.onUploadProgress);
                }
                fs.createReadStream(pathStr)
                    .on('error', function (err) { return reject(err); })
                    .pipe(writable)
                    .on('error', function (err) { return reject(err); })
                    .on('finish', function () { return resolve([file, file.metadata]); });
            });
        });
    };
    return Bucket;
}());
exports.Bucket = Bucket;
var MARKER_KEY = 'nextMarker';
var PREFIXES_KEY = 'commonPrefixes';
var Contents_KEY = 'contents';
