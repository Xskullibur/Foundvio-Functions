/// <reference types="node" />
import { Bucket } from './bucket';
import { DownloadOptions, SaveOptions, CreateWriteStreamOptions } from '../model/options';
import { CopyResponse, DownloadResponse, FileExistResponse, GetFileMetadataResponse, GetFileResponse, Metadata, MoveResponse, SetFileMetadataResponse } from '../model/callback';
import { Readable, Writable } from 'stream';
import { StorageManagement } from './storagemanagement';
export declare class File {
    bucket: Bucket;
    storage: StorageManagement;
    name: string;
    metadata?: Metadata;
    constructor(bucket: Bucket, name: string);
    copy(des: string | Bucket | File): Promise<CopyResponse>;
    createReadStream(): Readable;
    /**
     * this function will upload file
     * @param options
     * @returns {module:stream.internal.Writable}
     */
    createWriteStream(options: CreateWriteStreamOptions): Writable;
    delete(): Promise<void>;
    download(option?: DownloadOptions): Promise<DownloadResponse | void>;
    exists(): Promise<FileExistResponse>;
    get(): Promise<GetFileResponse>;
    getMetadata(): Promise<GetFileMetadataResponse>;
    move(des: string | Bucket | File): Promise<MoveResponse>;
    save(data: any, options?: SaveOptions): Promise<any>;
    setMetadata(metadata: Metadata): Promise<SetFileMetadataResponse>;
    private upload;
}
