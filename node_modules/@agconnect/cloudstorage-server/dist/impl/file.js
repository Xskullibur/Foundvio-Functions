"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.File = void 0;
var bucket_1 = require("./bucket");
var request_1 = require("../request/request");
var stream_1 = require("stream");
var stream_events_1 = __importDefault(require("stream-events"));
var concat = require("concat-stream");
var fs = __importStar(require("fs"));
var validator_1 = require("../utils/validator");
var error_1 = require("../error/error");
var constants_1 = require("./constants");
var duplexify = require('duplexify');
var pumpify = require('pumpify');
var crypto = require('crypto');
var File = /** @class */ (function () {
    function File(bucket, name) {
        this.bucket = bucket;
        this.storage = bucket.storage;
        this.name = name;
    }
    File.prototype.copy = function (des) {
        var desBucket;
        var desName;
        var newFile;
        if (typeof des === 'string') {
            validator_1.validateDestinationString('file.copy: ', des);
            var parsedDes = DES_REGEX.exec(des);
            if (parsedDes !== null && parsedDes.length === 3) {
                desBucket = parsedDes[1];
                desName = parsedDes[2];
            }
            else {
                throw error_1.parseDestinationStringError();
            }
        }
        else if (des instanceof bucket_1.Bucket) {
            validator_1.validateBucketNameString('file.copy: ', des.name);
            desBucket = des.name;
            desName = this.name;
        }
        else if (des instanceof File) {
            desBucket = des.bucket.name;
            desName = des.name;
            newFile = des;
        }
        else {
            throw error_1.invalidDestination('file.copy: ');
        }
        newFile = newFile || this.storage.bucket(desBucket).file(desName);
        var url = '/v0/' + desBucket + '/' + encodeURIComponent(desName);
        var header = {
            'X-Agc-Copy-Source': '/' + encodeURIComponent(this.name)
        };
        return new Promise(function (resolve, reject) {
            request_1.request(request_1.HttpMethod.PUT, url, null, null, header)
                .then(function (res) { return resolve([newFile]); })
                .catch(function (err) { return reject(err); });
        });
    };
    File.prototype.createReadStream = function () {
        var _this = this;
        var stream = stream_events_1.default(new stream_1.PassThrough());
        var readRequest = function () {
            var url = '/v0/' + _this.bucket.name + '/' + encodeURIComponent(_this.name);
            ;
            var header = {};
            // note that axios.request should return stream type data
            request_1.request(request_1.HttpMethod.GET, url, null, null, header, true).then(function (res) {
                stream.emit('response', res.data);
                res.data.pipe(stream);
                res.data.on('end', function () {
                    stream.end();
                });
            }).catch(function (err) {
                stream.destroy(err);
            });
        };
        stream.on('reading', readRequest);
        return stream;
    };
    /**
     * this function will upload file
     * @param options
     * @returns {module:stream.internal.Writable}
     */
    File.prototype.createWriteStream = function (options) {
        var _this = this;
        if (options.size > constants_1.SIMPLE_UPLOAD_MAX_SIZE) {
            throw error_1.simpleUploadErr();
        }
        var fileWriteStream = duplexify();
        fileWriteStream.on('progress', function (evt) {
            stream.emit('progress', evt);
        });
        var stream = stream_events_1.default(pumpify([new stream_1.PassThrough(), fileWriteStream]));
        stream.on('writing', function () {
            _this.upload(fileWriteStream, _this, options);
        });
        fileWriteStream.on('response', stream.emit.bind(stream, 'response'));
        fileWriteStream.on('prefinish', function () {
            stream.cork();
        });
        fileWriteStream.on('complete', function () {
            stream.uncork();
            stream.emit('complete');
        });
        return stream;
    };
    File.prototype.delete = function () {
        var url = '/v0/' + this.bucket.name + '/' + encodeURIComponent(this.name);
        var headers = {};
        return request_1.generateRes(request_1.request(request_1.HttpMethod.DELETE, url, null, null, headers));
    };
    File.prototype.download = function (option) {
        var options = option ? option : {};
        var destination = options.destination;
        var stream = this.createReadStream();
        return new Promise(function (resolve, reject) {
            if (destination) {
                stream.on('error', reject)
                    .pipe(fs.createWriteStream(destination))
                    .on('error', reject)
                    .on('finish', function () { return resolve(); });
            }
            else {
                stream.on('error', reject)
                    .pipe(concat(resolve));
            }
        });
    };
    File.prototype.exists = function () {
        var url = '/v0/' + this.bucket.name + '/' + encodeURIComponent(this.name) + '?metadata=query';
        var headers = {};
        return new Promise(function (resolve, reject) {
            request_1.request(request_1.HttpMethod.GET, url, null, null, headers)
                .then(function (res) {
                resolve(true);
            })
                .catch(function (err) {
                var _a;
                if (((_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status) === 404) {
                    resolve(false);
                }
                else {
                    reject(err);
                }
            });
        });
    };
    File.prototype.get = function () {
        var _this = this;
        var url = '/v0/' + this.bucket.name + '/' + encodeURIComponent(this.name);
        var headers = {};
        return new Promise(function (resolve, reject) {
            request_1.request(request_1.HttpMethod.GET, url, null, null, headers)
                .then(function (res) {
                resolve([_this, res.data]);
            })
                .catch(function (err) { return reject(err); });
        });
    };
    File.prototype.getMetadata = function () {
        var url = '/v0/' + this.bucket.name + '/' + encodeURIComponent(this.name) + '?metadata=query';
        var headers = {};
        return request_1.generateRes(request_1.request(request_1.HttpMethod.GET, url, null, null, headers));
    };
    File.prototype.move = function (des) {
        var _this = this;
        // call this.copy and this.delete
        return new Promise(function (resolve, reject) {
            _this.copy(des).then(function (res) {
                // avoid that new file with same path will be deleted
                if (!(_this.name === res[0].name) || !(_this.bucket.name === res[0].bucket.name)) {
                    var resData_1 = res[0];
                    _this.delete().then(function (ress) {
                        resolve([resData_1]);
                    }).catch(function (err) {
                        reject(err);
                    });
                }
            }).catch(function (err) {
                reject(err);
            });
        });
    };
    File.prototype.save = function (data, options) {
        var _this = this;
        var size;
        if (options && options.size) {
            size = options.size;
        }
        else {
            size = data.length;
        }
        if (size && size > constants_1.SIMPLE_UPLOAD_MAX_SIZE) {
            throw error_1.simpleUploadErr();
        }
        return new Promise(function (resolve, reject) {
            var writable = _this.createWriteStream({ size: size })
                .on('error', reject)
                .on('finish', resolve);
            if (options === null || options === void 0 ? void 0 : options.onUploadProgress) {
                writable.on('progress', options.onUploadProgress);
            }
            writable.end(data);
        });
    };
    File.prototype.setMetadata = function (metadata) {
        var _a;
        var url = '/v0/' + this.bucket.name + '/' + encodeURIComponent(this.name) + '?metadata=update';
        var headers = {};
        if (metadata.cacheControl) {
            headers = Object.assign(headers, {
                'X-Agc-Cache-Control': metadata.cacheControl
            });
        }
        if (metadata.contentDisposition) {
            headers = Object.assign(headers, {
                'X-Agc-Content-Disposition': metadata.contentDisposition
            });
        }
        if (metadata.contentEncoding) {
            headers = Object.assign(headers, {
                'X-Agc-Content-Encoding': metadata.contentEncoding
            });
        }
        if (metadata.contentLanguage) {
            headers = Object.assign(headers, {
                'X-Agc-Content-Language': metadata.contentLanguage
            });
        }
        if (metadata.contentType) {
            headers = Object.assign(headers, {
                'X-Agc-Content-Type': metadata.contentType
            });
        }
        if (metadata.customMetadata) {
            for (var key in metadata.customMetadata) {
                var headerName = 'X-Agc-meta-' + key;
                headers = Object.assign(headers, (_a = {},
                    _a[headerName] = metadata.customMetadata[key],
                    _a));
            }
        }
        return request_1.generateRes(request_1.request(request_1.HttpMethod.GET, url, null, null, headers));
    };
    File.prototype.upload = function (dup, file, options, resumable) {
        var _this = this;
        var stream = new ProgressStream();
        dup.setWritable(stream);
        // create progress listener
        stream.on('progress', function (evt) { return dup.emit('progress', evt); });
        var url = '/v0/' + file.bucket.name + '/' + encodeURIComponent(file.name);
        var headers = {};
        if (resumable) {
            headers = {
                'Content-Length': options.size
            };
        }
        else {
            headers = {
                'Content-Length': options.size,
                'X-Agc-File-Size': options.size
            };
        }
        if (options.sha256) {
            Object.assign(headers, { 'X-Agc-Sha256': options.sha256 });
        }
        request_1.request(request_1.HttpMethod.PUT, url, stream, null, headers).then(function (res) {
            _this.metadata = res.data;
            dup.emit('response', res);
            dup.emit('complete');
        }).catch(function (err) {
            dup.destroy(err);
        });
    };
    return File;
}());
exports.File = File;
var ProgressStream = /** @class */ (function (_super) {
    __extends(ProgressStream, _super);
    function ProgressStream() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.bytesRead = 0;
        return _this;
    }
    ProgressStream.prototype._transform = function (chunk, encoding, callback) {
        this.bytesRead += chunk.length;
        this.emit('progress', { bytesWritten: this.bytesRead });
        this.push(chunk);
        callback();
    };
    return ProgressStream;
}(stream_1.Transform));
var DES_REGEX = /^([a-z0-9-]+)\/(.+)$/;
