"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageManagement = void 0;
var bucket_1 = require("./bucket");
var request_1 = require("../request/request");
var config_1 = require("../config/config");
var validator_1 = require("../utils/validator");
var StorageManagement = /** @class */ (function () {
    function StorageManagement(options) {
        var config = config_1.Config.getInstance();
        if (options && options.autoRetry !== undefined) {
            config.autoRetry = options.autoRetry;
        }
        if (options && options.maxRetries !== undefined) {
            config.maxRetries = options.maxRetries;
        }
        if (options && options.timeout !== undefined) {
            config.timeout = options.timeout;
        }
    }
    StorageManagement.prototype.bucket = function (name) {
        validator_1.validateBucketNameString('storage.bucket: ', name);
        return new bucket_1.Bucket(this, name);
    };
    StorageManagement.prototype.createBucket = function (name, metadata) {
        validator_1.validateBucketName('storage.createBucket: ', name);
        var url = '/v0/';
        var headers = {
            'X-Agc-Bucket-Name': name + '-' + this.randomString(5)
        };
        var data = null;
        if (metadata && metadata.cors) {
            data = {
                'rules': metadata.cors
            };
        }
        return request_1.generateRes(request_1.request(request_1.HttpMethod.PUT, url, data, null, headers));
    };
    StorageManagement.prototype.getBuckets = function () {
        var url = '/v0/';
        var header = {};
        return request_1.generateRes(request_1.request(request_1.HttpMethod.GET, url, null, null, header));
    };
    StorageManagement.prototype.randomString = function (length) {
        var result = '';
        var chars = '0123456789abcdefghijklmnopqrstuvwxyz';
        for (var i = length; i > 0; --i) {
            result += chars[Math.floor(Math.random() * chars.length)];
        }
        return result;
    };
    return StorageManagement;
}());
exports.StorageManagement = StorageManagement;
