"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialParser = void 0;
var error_1 = require("./../error/error");
var error_message_1 = require("./../error/error-message");
var credential_type_1 = require("./credential-type");
var clientid_credential_1 = require("./clientid-credential");
var fs_1 = __importDefault(require("fs"));
var CredentialParser = /** @class */ (function () {
    function CredentialParser() {
    }
    CredentialParser.toCredential = function (filePath, func) {
        var data;
        if (filePath) {
            data = fs_1.default.readFileSync(filePath, 'utf8');
        }
        else {
            var envPath = process.env[CredentialParser.AGC_CONFIG_ENV_VAR];
            if (null == envPath || undefined == envPath) {
                throw new error_1.AGCError(error_message_1.ErrorCodeConstant.CREDENTIAL_ENV_NOT_SET);
            }
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            data = fs_1.default.readFileSync(process.env[CredentialParser.AGC_CONFIG_ENV_VAR], 'utf8');
        }
        var obj = JSON.parse(data);
        if (null == obj || undefined == obj) {
            throw new error_1.AGCError(error_message_1.ErrorCodeConstant.CREDENTIAL_PARSER);
        }
        var clientSecret;
        switch (obj.type) {
            case credential_type_1.CredentialType.TEAM_CLIENT_ID:
                clientSecret = func ? func() : obj.client_secret;
                var clientTeam = new clientid_credential_1.ClientIdCredential('', '', obj.developer_id, obj.type, obj.client_id, clientSecret, obj.configuration_version);
                return clientTeam;
            case credential_type_1.CredentialType.PROJECT_CLIENT_ID:
                clientSecret = func ? func() : obj.client_secret;
                var clientProject = new clientid_credential_1.ClientIdCredential(obj.project_id, obj.region, obj.developer_id, obj.type, obj.client_id, clientSecret, obj.configuration_version);
                return clientProject;
            default:
                throw new error_1.AGCError(error_message_1.ErrorCodeConstant.CREDENTIAL_PARSER);
        }
    };
    CredentialParser.AGC_CONFIG_ENV_VAR = 'AGC_CONFIG';
    return CredentialParser;
}());
exports.CredentialParser = CredentialParser;
