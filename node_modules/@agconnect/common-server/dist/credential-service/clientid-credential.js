"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientIdCredential = void 0;
var http_client_1 = require("./../http-client/http-client");
var access_token_1 = require("./access-token");
var error_1 = require("../error/error");
var config_1 = require("../config/config");
var ClientIdCredential = /** @class */ (function () {
    function ClientIdCredential(projectId, region, developerId, type, clientId, clientSecret, configurationVersion) {
        this.projectId = '';
        this.region = '';
        this.developerId = '';
        this.type = '';
        this.clientId = '';
        this.clientSecret = '';
        this.configurationVersion = '';
        this.accessToken = null;
        this.projectId = projectId;
        this.region = region;
        this.developerId = developerId;
        this.type = type;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.configurationVersion = configurationVersion;
    }
    ClientIdCredential.prototype.getProjectId = function () {
        return this.projectId;
    };
    ClientIdCredential.prototype.getRegion = function () {
        return this.region;
    };
    ClientIdCredential.prototype.getDeveloperId = function () {
        return this.developerId;
    };
    ClientIdCredential.prototype.getType = function () {
        return this.type;
    };
    ClientIdCredential.prototype.getClientId = function () {
        return this.clientId;
    };
    ClientIdCredential.prototype.getClientSecret = function () {
        return this.clientSecret;
    };
    ClientIdCredential.prototype.getConfigurationVersion = function () {
        return this.configurationVersion;
    };
    // 获取accessToken
    ClientIdCredential.prototype.getAccessToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (null == this.accessToken || !this.accessToken.isValid()) {
                    return [2 /*return*/, this.refreshAccessToken()];
                }
                else {
                    return [2 /*return*/, Promise.resolve(this.accessToken.getToken())];
                }
                return [2 /*return*/];
            });
        });
    };
    // 刷新accessToken
    ClientIdCredential.prototype.refreshAccessToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var httpClient, body, param, header, url, token, expires_in;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        httpClient = http_client_1.getHttpClient();
                        body = {
                            grant_type: 'client_credentials',
                            client_id: this.clientId,
                            client_secret: this.clientSecret,
                        };
                        param = {};
                        header = {
                            algorithm_type: 1,
                        };
                        url = this.getGWTokenUrl();
                        token = '';
                        expires_in = 0;
                        return [4 /*yield*/, httpClient
                                .post(url, body, param, header)
                                .then(function (res) {
                                token = res.data.access_token;
                                expires_in = res.data.expires_in;
                            })
                                .catch(function (err) {
                                return Promise.reject(new error_1.AGCBaseError(err));
                            })];
                    case 1:
                        _a.sent();
                        this.accessToken = new access_token_1.AccessToken(token, new Date().getTime() + 1000 * expires_in);
                        return [2 /*return*/, Promise.resolve(token)];
                }
            });
        });
    };
    ClientIdCredential.prototype.getGWTokenUrl = function () {
        var _this = this;
        var url;
        var path = config_1.Configuration.getCommonConfiguration(ClientIdCredential.CLIENT_TOKEN_PATH);
        if (this.getRegion() != null && this.getRegion() != undefined && this.getRegion().length > 0) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var teamUrl = config_1.Configuration.getCommonConfiguration(ClientIdCredential.PROJECT_CLOUDGW_URL);
            teamUrl.forEach(function (element) {
                if (element.region == _this.getRegion()) {
                    url = element.url + path;
                }
            });
        }
        else {
            url = config_1.Configuration.getCommonConfiguration(ClientIdCredential.TEAM_CLOUDGW_URL) + path;
        }
        return url;
    };
    ClientIdCredential.PROJECT_CLOUDGW_URL = 'project_cloudgw_url';
    ClientIdCredential.TEAM_CLOUDGW_URL = 'team_cloudgw_url';
    ClientIdCredential.CLIENT_TOKEN_PATH = 'client_token_path';
    return ClientIdCredential;
}());
exports.ClientIdCredential = ClientIdCredential;
