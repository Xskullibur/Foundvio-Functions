"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AGCClient = void 0;
var error_1 = require("./../error/error");
var error_message_1 = require("./../error/error-message");
var credential_parser_1 = require("./../credential-service/credential-parser");
var common_log_1 = require("../log-config/common-log");
var EnvType;
(function (EnvType) {
    EnvType[EnvType["BROWSER"] = 0] = "BROWSER";
    EnvType[EnvType["NODE_JS"] = 1] = "NODE_JS";
    EnvType[EnvType["UNKNOWN"] = 2] = "UNKNOWN";
})(EnvType || (EnvType = {}));
var envValue = function () {
    if (Object.prototype.toString.call(process) === '[object process]') {
        return EnvType.NODE_JS;
    }
    if (typeof globalThis === 'object' && globalThis.globalThis === globalThis) {
        return EnvType.BROWSER;
    }
    return EnvType.UNKNOWN;
};
var AGCClient = /** @class */ (function () {
    function AGCClient(name, credential) {
        this.name = name;
        this.credential = credential;
    }
    AGCClient.prototype.getName = function () {
        return this.name;
    };
    AGCClient.prototype.getCredential = function () {
        return this.credential;
    };
    AGCClient.initialize = function (credential, name) {
        if (name === void 0) { name = AGCClient.DEFAULT_INSTANCE_NAME; }
        common_log_1.logger.info('start initialize');
        AGCClient.judgeEnv();
        if (typeof credential === 'undefined') {
            common_log_1.logger.info('credential is undefined, so use default');
            AGCClient.INSTANTS.set(AGCClient.DEFAULT_INSTANCE_NAME, new AGCClient(name, credential_parser_1.CredentialParser.toCredential()));
        }
        else {
            if (!credential) {
                common_log_1.logger.error('credential is null');
                throw new error_1.AGCError(error_message_1.ErrorCodeConstant.AGC_CLIENT_CREDENTIAL);
            }
            if (!name) {
                common_log_1.logger.error('name is null or undefined or empty');
                throw new error_1.AGCError(error_message_1.ErrorCodeConstant.AGC_CLIENT_PARA);
            }
            if (AGCClient.INSTANTS.has(name)) {
                common_log_1.logger.error('instance already exist :' + name);
                throw new error_1.AGCError(error_message_1.ErrorCodeConstant.AGC_CLIENT_EXIST);
            }
            common_log_1.logger.info('add instance :' + name);
            AGCClient.INSTANTS.set(name, new AGCClient(name, credential));
        }
    };
    AGCClient.getInstance = function (name) {
        if (name === void 0) { name = AGCClient.DEFAULT_INSTANCE_NAME; }
        if (!AGCClient.INSTANTS.has(name)) {
            throw new error_1.AGCError(error_message_1.ErrorCodeConstant.AGC_CLIENT_NOT_EXISTL);
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return AGCClient.INSTANTS.get(name);
    };
    AGCClient.judgeEnv = function () {
        switch (envValue()) {
            case EnvType.NODE_JS:
                common_log_1.logger.info('env node js');
                return;
            case EnvType.BROWSER:
                common_log_1.logger.error('env browser');
                throw new error_1.AGCError(error_message_1.ErrorCodeConstant.ENV_NOT_NODEJS);
            case EnvType.UNKNOWN:
                common_log_1.logger.error('env unknown');
                throw new error_1.AGCError(error_message_1.ErrorCodeConstant.ENV_NOT_NODEJS);
            default:
                common_log_1.logger.error('env unknown default');
                throw new error_1.AGCError(error_message_1.ErrorCodeConstant.ENV_NOT_NODEJS);
        }
    };
    AGCClient.INSTANTS = new Map();
    AGCClient.DEFAULT_INSTANCE_NAME = 'default';
    return AGCClient;
}());
exports.AGCClient = AGCClient;
