"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logConfig = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
var error_1 = require("../error/error");
var error_message_1 = require("../error/error-message");
var winston_1 = require("winston");
var path_1 = __importDefault(require("path"));
var winston_daily_rotate_file_1 = __importDefault(require("winston-daily-rotate-file"));
//文件夹路径设置 对应配置文件path
var defaultLogDir = '../logs';
//打印日志等级设置，暂时为全局设定 对应配置文件file_level
var defaultLogLevel = 'info';
//日志文件的大小 对应配置文件maxSize
var defaultMaxSize = '20m';
//日志文件旋转周期或者是最大文件数，含‘d’为时间天  对应配置文件maxFiles
var defaultMaxFiles = '14d';
//默认日志的文件的前缀  对应配置文件file_name_prefix
var defaultPrefix = 'common';
//默认日志输出的元数据  对应配置文件service
var defaultMetaInfo = 'common-server';
//默认日志开关是否打开  对应配置文件switch
var defaultLogSwitch = 'off';
function logConfig(configPath) {
    //读取配置文件
    var winstonConfig = readConfigFile(configPath);
    //获取配置信息
    var configInfo = getConfigInfo(winstonConfig);
    //当前文件所在的(__dirname)目录所在的父目录下加入defaultLogDir目录
    var logDir = path_1.default.join(path_1.default.dirname(configPath), configInfo.defaultLogDir);
    // 调用未知异常的日志文件设置
    var exceptionsFile = path_1.default.join(logDir, 'exceptions.log');
    // 打印错误日志的文件设置
    var errorFile = path_1.default.join(logDir, 'error.log');
    // 打印日志的文件设置
    var logFile = path_1.default.join(logDir, configInfo.defaultPrefix + '-%DATE%.log');
    // 创建logger实例
    var transportsConfig;
    if (configInfo.defaultLogSwitch === 'on') {
        transportsConfig = logTransportsConfig(configInfo, errorFile, logFile);
    }
    var logger = creatInstance(configInfo, transportsConfig, exceptionsFile);
    return logger;
}
exports.logConfig = logConfig;
//读取配置文件
function readConfigFile(configPath) {
    var winstonConfig;
    try {
        winstonConfig = require(configPath);
    }
    catch (error) {
        throw new error_1.AGCBaseError(error_message_1.ErrorCodeConstant.toMessage(error_message_1.ErrorCodeConstant.FS_READ_FAIL));
    }
    return winstonConfig;
}
function getConfigInfo(winstonConfig) {
    //获取配置开关信息
    var log_switch = winstonConfig.switch;
    if (log_switch) {
        defaultLogSwitch = log_switch;
    }
    // 日志文件前缀获取
    var prefix = winstonConfig.file_name_prefix;
    if (prefix) {
        defaultPrefix = prefix;
    }
    // 日志文件路径
    var getLogDir = winstonConfig.path;
    if (getLogDir) {
        defaultLogDir = getLogDir;
    }
    // 日志等级设置分为7个{error: 0, warn: 1, info: 2,  http: 3, verbose: 4, debug: 5, silly: 6 }
    var getLogLevel = winstonConfig.file_level;
    if (getLogLevel) {
        defaultLogLevel = getLogLevel;
    }
    // 日志文件大小设置，单位可以是kb，mb和gb单位 “ k”，“ m”或“ g”作为后缀
    var getLogMaxSize = winstonConfig.maxSize;
    if (getLogMaxSize) {
        defaultMaxSize = getLogMaxSize;
    }
    // 日志保留时间或者是最大文件数设置，加'd'为天数
    var getLogMaxFiles = winstonConfig.maxFiles;
    if (getLogMaxFiles) {
        defaultMaxFiles = getLogMaxFiles;
    }
    // logger 日志控制台打印等级设置
    var defaultConsoleLevel = defaultLogLevel;
    var console_log_level = winstonConfig.console_level;
    if (console_log_level) {
        defaultConsoleLevel = console_log_level;
    }
    //服务信息
    var metaInfo = winstonConfig.service;
    if (metaInfo) {
        defaultMetaInfo = metaInfo;
    }
    return {
        defaultLogSwitch: defaultLogSwitch,
        defaultPrefix: defaultPrefix,
        defaultLogDir: defaultLogDir,
        defaultLogLevel: defaultLogLevel,
        defaultMaxSize: defaultMaxSize,
        defaultMaxFiles: defaultMaxFiles,
        defaultConsoleLevel: defaultConsoleLevel,
        defaultMetaInfo: defaultMetaInfo,
    };
}
// 日志格式化设置
var formatter = winston_1.format.combine(winston_1.format.splat(), 
// 时间格式化
winston_1.format.timestamp({
    format: 'YYYY-MM-DD HH:mm:ss SSS',
}), 
//自定义打印形式 json格式的打印 format.prettyPrint() ,常规打印format.simple()
winston_1.format.printf(function (info) {
    //设置私有属性则不打印
    if (info.private) {
        return;
    }
    return "[" + info.service + "] " + info.timestamp + " " + info.level + ":" + info.message;
}));
//输出文件设置
function logTransportsConfig(configInfo, errorFile, logFile) {
    var logTransports = {
        //输出到控制台中的日志,注意首字母，等级设置就近原则
        console_config: new winston_1.transports.Console({ level: configInfo.defaultConsoleLevel }),
        //输出到log文件中
        file: new winston_1.transports.File({
            level: 'error',
            filename: errorFile,
        }),
        //根据天进行切割压缩文件设置
        rotateFile: new winston_daily_rotate_file_1.default({
            filename: logFile,
            //文件名的日期格式
            datePattern: 'YYYY-MM-DD-HH',
            //是否压缩
            zippedArchive: true,
            //要保留的最大日志数。如果未设置，则不会删除任何日志。这可以是文件数量或天数。如果使用天数，请添加“ d”作为后缀
            maxFiles: configInfo.defaultMaxFiles,
            //限制日志的大小 kb，mb和gb单位 “ k”，“ m”或“ g”作为后缀
            maxSize: defaultMaxSize,
            //需要轮转的时间，分钟和时 分别是m和h,指定时间将旧的文件删除，新的文件不压缩
            frequency: '3h',
        }),
    };
    return logTransports;
}
function creatInstance(configInfo, transportsConfig, exceptionsFile) {
    var logger;
    if (configInfo.defaultLogSwitch === 'on') {
        //当配置需要开启日志，则走此分支
        logger = winston_1.createLogger({
            //全局打印日志等级，如果console设置，console则单独
            level: configInfo.defaultLogLevel,
            format: formatter,
            defaultMeta: { service: configInfo.defaultMetaInfo },
            transports: [transportsConfig.console_config, transportsConfig.file, transportsConfig.rotateFile],
            exceptionHandlers: [
                new winston_1.transports.File({
                    filename: exceptionsFile,
                }),
                new winston_1.transports.Console(),
            ],
            exitOnError: false,
        });
    }
    else {
        //当配置不需要开启日志，则走此分支
        logger = winston_1.createLogger({
            //全局打印日志等级，如果console设置，console则单独
            level: configInfo.defaultLogLevel,
            format: formatter,
            defaultMeta: { service: configInfo.defaultMetaInfo },
            transports: [new winston_1.transports.Console({ level: 'error' })],
            exceptionHandlers: [new winston_1.transports.Console()],
            exitOnError: false,
        });
    }
    return logger;
}
