"use strict";
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/* eslint-disable @typescript-eslint/no-explicit-any */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClientAPIImpl = void 0;
var axios_1 = __importDefault(require("axios"));
var https_1 = __importDefault(require("https"));
var error_1 = require("../error/error");
var error_message_1 = require("../error/error-message");
var utils_1 = require("./../utils/utils");
var common_headers_1 = require("./common-headers");
var common_log_1 = require("../log-config/common-log");
/**
 * http method
 */
var HttpMethod;
(function (HttpMethod) {
    HttpMethod[HttpMethod["GET"] = 0] = "GET";
    HttpMethod[HttpMethod["HEAD"] = 1] = "HEAD";
    HttpMethod[HttpMethod["POST"] = 2] = "POST";
    HttpMethod[HttpMethod["PUT"] = 3] = "PUT";
    HttpMethod[HttpMethod["PATCH"] = 4] = "PATCH";
    HttpMethod[HttpMethod["DELETE"] = 5] = "DELETE";
    HttpMethod[HttpMethod["OPTIONS"] = 6] = "OPTIONS";
    HttpMethod[HttpMethod["TRACE"] = 7] = "TRACE";
})(HttpMethod || (HttpMethod = {}));
var HttpClientAPIImpl = /** @class */ (function () {
    //Default parameter settings
    function HttpClientAPIImpl(cfg) {
        var timeout = HttpClientAPIImpl.DEFAULT_TIMEOUT;
        var responseType = HttpClientAPIImpl.DEFAULT_RESPONSE_TYPE;
        if (cfg) {
            if (cfg.timeout) {
                timeout = cfg.timeout;
            }
            if (cfg.responseType) {
                responseType = this.getReponseType(cfg.responseType);
            }
        }
        this.instance = axios_1.default.create({
            timeout: timeout,
            responseType: responseType
        });
        if (cfg) {
            if (cfg.maxBodyLength) {
                this.instance.defaults.maxBodyLength = cfg.maxBodyLength;
            }
            if (cfg.maxContentLength) {
                this.instance.defaults.maxContentLength = cfg.maxContentLength;
            }
        }
        this.instance.defaults.headers.common['User-Agent'] = common_headers_1.CommonHeaders.getUserAgent();
        this.instance.defaults.headers.common['serverSdkName'] = common_headers_1.CommonHeaders.getSDKName();
        this.instance.defaults.headers.common['serverSdkVersion'] = common_headers_1.CommonHeaders.getSDKVersion();
        var isEnableSSLCert = true;
        if (cfg && cfg.isEnableSSLCert === false) {
            isEnableSSLCert = false;
        }
        if (isEnableSSLCert) {
            // eslint-disable-next-line @typescript-eslint/no-var-requires            
            var rootCas = require('ssl-root-cas').create();
            if (cfg && cfg.casFile) {
                for (var n in cfg.casFile) {
                    if (utils_1.voilidatePath(cfg.casFile[n])) {
                        rootCas.addFile(cfg.casFile[n]);
                    }
                }
            }
            this.instance.defaults.httpsAgent = new https_1.default.Agent({
                ca: rootCas,
            });
        }
        else {
            this.instance.defaults.httpsAgent = new https_1.default.Agent({
                rejectUnauthorized: false,
            });
        }
        common_log_1.logger.info('this is the constructor of HttpClientAPIImpl');
    }
    HttpClientAPIImpl.prototype.post = function (url, data, params, headers) {
        common_log_1.logger.info('step into post request of HttpClientAPIImpl');
        return this.send(HttpMethod.POST, url, data, params, headers);
    };
    HttpClientAPIImpl.prototype.get = function (url, params, headers) {
        common_log_1.logger.info('step into get request of HttpClientAPIImpl');
        return this.send(HttpMethod.GET, url, null, params, headers);
    };
    HttpClientAPIImpl.prototype.delete = function (url, data, params, headers) {
        common_log_1.logger.info('step into delete request of HttpClientAPIImpl');
        return this.send(HttpMethod.DELETE, url, data, params, headers);
    };
    HttpClientAPIImpl.prototype.put = function (url, data, params, headers) {
        common_log_1.logger.info('step into put request of HttpClientAPIImpl');
        return this.send(HttpMethod.PUT, url, data, params, headers);
    };
    HttpClientAPIImpl.prototype.getReponseType = function (type) {
        if (!type) {
            // default is json
            return "json";
        }
        else if ('arraybuffer' === type) {
            return 'arraybuffer';
        }
        else if ('blob' === type) {
            return 'blob';
        }
        else if ('document' === type) {
            return 'document';
        }
        else if ('json' === type) {
            return 'json';
        }
        else if ('text' === type) {
            return 'text';
        }
        else if ('stream' === type) {
            return 'stream';
        }
        common_log_1.logger.info('not supported http response type');
        throw new error_1.AGCError(error_message_1.ErrorCodeConstant.CREATE_HTTP_CLIENT_REPONSE_TYPE);
    };
    HttpClientAPIImpl.prototype.send = function (methodType, url, requestData, requestParams, requestHeaders) {
        return __awaiter(this, void 0, void 0, function () {
            var axiosHeader;
            return __generator(this, function (_a) {
                if (!utils_1.urlValidate(url)) {
                    throw new error_1.AGCError(error_message_1.ErrorCodeConstant.URL_VALIDATE_FAIL);
                }
                this.instance.defaults.headers.common['X-Request-Id'] = common_headers_1.CommonHeaders.generateRequestId();
                axiosHeader = this.instance.defaults.headers = utils_1.addHeaders(this.instance.defaults.headers, requestHeaders);
                switch (methodType) {
                    case HttpMethod.PUT:
                        common_log_1.logger.info('step into put request of axios');
                        return [2 /*return*/, this.instance.put(url, requestData, { params: requestParams, headers: axiosHeader })];
                    case HttpMethod.POST:
                        common_log_1.logger.info('step into post request of axios');
                        return [2 /*return*/, this.instance.post(url, requestData, { params: requestParams, headers: axiosHeader })];
                    case HttpMethod.GET:
                        common_log_1.logger.info('step into get request of axios');
                        return [2 /*return*/, this.instance.get(url, { params: requestParams, headers: axiosHeader })];
                    case HttpMethod.DELETE:
                        common_log_1.logger.info('step into delete request of axios');
                        return [2 /*return*/, this.instance.delete(url, { headers: axiosHeader, params: requestParams, transformRequest: [function (data) { data = JSON.stringify(requestData); return data; }] })];
                    default:
                        common_log_1.logger.info('step into undefind method in HttpClientAPIImpl with the request of axios');
                        throw new error_1.AGCError(error_message_1.ErrorCodeConstant.MTTHOD_NOT_EXSIT);
                }
                return [2 /*return*/];
            });
        });
    };
    HttpClientAPIImpl.DEFAULT_TIMEOUT = 10 * 1000;
    HttpClientAPIImpl.DEFAULT_RESPONSE_TYPE = "json";
    return HttpClientAPIImpl;
}());
exports.HttpClientAPIImpl = HttpClientAPIImpl;
