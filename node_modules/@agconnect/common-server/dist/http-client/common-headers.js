"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonHeaders = void 0;
var config_1 = require("../config/config");
var UUID = __importStar(require("uuid"));
var CommonHeaders = /** @class */ (function () {
    function CommonHeaders() {
    }
    /**
     * request id generator
     *
     * @return request id
     */
    CommonHeaders.generateRequestId = function () {
        var requestUUID = UUID.v1().replace(/-/g, '');
        return requestUUID;
    };
    /**
     * get user agent for server sdk
     *
     * @return user agent
     */
    CommonHeaders.getUserAgent = function () {
        return CommonHeaders.USER_AGENT_PREFIX + config_1.Configuration.getCommonConfiguration(CommonHeaders.SDK_NAME);
    };
    /**
     * get sdk name
     *
     * @return sdk name
     */
    CommonHeaders.getSDKName = function (serviceName) {
        if (serviceName) {
            return CommonHeaders.SDK_PREFIX + serviceName;
        }
        return CommonHeaders.SDK_PREFIX + config_1.Configuration.getCommonConfiguration(CommonHeaders.SDK_NAME);
    };
    /**
     * get sdk version
     *
     * @return sdk version
     */
    CommonHeaders.getSDKVersion = function () {
        return config_1.Configuration.getCommonConfiguration(CommonHeaders.SDK_VERSION);
    };
    CommonHeaders.DEFAULT_CONFIG = 'agconnect-common';
    CommonHeaders.KEY_REQUEST_ID = 'X-Request-Id';
    CommonHeaders.KEY_USER_AGENT = 'User-Agent';
    CommonHeaders.SDK_NAME = 'sdk_name';
    CommonHeaders.SDK_VERSION = 'sdk_version';
    CommonHeaders.ALGORITHM_TYPE_NEW_JWT_TOKEN = '1';
    CommonHeaders.SDK_PREFIX = 'node/';
    CommonHeaders.USER_AGENT_PREFIX = 'AGCServerSDK/';
    CommonHeaders.KEY_AUTHORIZATION = 'Authorization';
    CommonHeaders.VALUE_BEARER = 'Bearer ';
    CommonHeaders.KEY_HOST = 'Host';
    return CommonHeaders;
}());
exports.CommonHeaders = CommonHeaders;
