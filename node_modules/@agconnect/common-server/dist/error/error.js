"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AGCError = exports.AGCBaseError = void 0;
var AGCBaseError = /** @class */ (function (_super) {
    __extends(AGCBaseError, _super);
    /**
     * constructor for exception extends father error
     * @param {string} value option for params for define errorName
     * @param {string} msg info about exception.
     * @return {new AGCBaseError()}
     *
     */
    function AGCBaseError(msg, value) {
        var _this = _super.call(this, msg) || this;
        _this.defaultName = 'AGCError';
        if (value) {
            _this.name = value;
        }
        else {
            _this.name = _this.defaultName;
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        _this.__proto__ = AGCBaseError.prototype;
        return _this;
    }
    AGCBaseError.prototype.setName = function (value) {
        this.name = value;
    };
    AGCBaseError.prototype.getName = function () {
        return this.name;
    };
    return AGCBaseError;
}(Error));
exports.AGCBaseError = AGCBaseError;
//Pass in the constructor as an object {ErrorCode}, and integrate all methods of the parent class.
var AGCError = /** @class */ (function (_super) {
    __extends(AGCError, _super);
    /**
     * constructor for AGCErrorCode extends father error
     * @param {ErrorCode} errorCode option for params for define errorName
     * @param {string} name option attribute name about exception
     * @return {new AGCBaseError()}
     *
     */
    function AGCError(errorCode, name) {
        var _this = _super.call(this, errorCode.code + AGCError.Colon + errorCode.message, name) || this;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        _this.__proto__ = AGCError.prototype;
        _this.errorCode = errorCode;
        return _this;
    }
    AGCError.prototype.getCode = function () {
        return this.errorCode.code;
    };
    AGCError.prototype.getMessage = function () {
        return this.errorCode.message;
    };
    AGCError.Colon = ': ';
    return AGCError;
}(AGCBaseError));
exports.AGCError = AGCError;
