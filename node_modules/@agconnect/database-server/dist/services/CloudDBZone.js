"use strict";
/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudDBZone = void 0;
var CloudDBZoneSnapshot_1 = require("../query/CloudDBZoneSnapshot");
var Transaction_1 = require("./Transaction");
var Utils_1 = require("../utils/Utils");
var AGConnectCloudDBException_1 = require("../exception/AGConnectCloudDBException");
var CloudDBErrorCode_1 = require("../exception/CloudDBErrorCode");
var FieldType_1 = require("../utils/FieldType");
var CloudDBService_1 = require("./CloudDBService");
var MAX_OBJECT_LIST_NUM = 1000;
var MAX_OBJECTS_CAPACITY = 20 * 1024 * 1024;
var MAX_FAILED_COUNT = 5;
/**
 * CloudDBZone object interface.
 *
 * @author linhongyi [linhongyi2@huawei.com]
 * @since 2020-10-10
 */
var CloudDBZone = /** @class */ (function (_super) {
    __extends(CloudDBZone, _super);
    function CloudDBZone(agcClient, cloudDBZoneConfig) {
        var _this = _super.call(this, agcClient) || this;
        _this.QUERIES_URL = 'v4/objects/queries';
        _this.TRANSACTION_QUERIES_URL = 'v4/syncObjects/queries';
        _this.DATA_URL = 'v3/syncObjects';
        _this.ALL_DATA_URL = 'v3/syncAllObjects';
        _this.TRANSACTION_URL = 'v3/transaction';
        _this.KEY_ORDERBY_FIELD_NAME = 'orderByFieldName';
        _this.KEY_ORDERBY_DIRECTION = 'orderByDirection';
        if (!cloudDBZoneConfig || !cloudDBZoneConfig.getCloudDBZoneName()) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_IS_NULL).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_IS_NULL);
        }
        _this.cloudDBZoneConfig = cloudDBZoneConfig;
        return _this;
    }
    /**
     * This method is used to get config of current CloudDBZone.
     *
     * @returns config of current CloudDBZone.
     */
    CloudDBZone.prototype.getCloudBDZoneConfig = function () {
        return this.cloudDBZoneConfig;
    };
    CloudDBZone.prototype.executeTransactionQuery = function (cloudDBZoneQuery) {
        return __awaiter(this, void 0, void 0, function () {
            var clazz, myObj, requestUrl, data;
            var _this = this;
            return __generator(this, function (_a) {
                clazz = cloudDBZoneQuery.getClazz();
                myObj = new clazz();
                this.verifyPaginationQuery(cloudDBZoneQuery, myObj);
                requestUrl = this.URL_PREFIX + this.TRANSACTION_QUERIES_URL;
                data = {
                    objectTypeName: myObj.getClassName(),
                    cloudDBZoneName: this.cloudDBZoneConfig.getCloudDBZoneName(),
                    queryConditions: Utils_1.Utils.serializeQueryConditions(cloudDBZoneQuery.getQueryConditions(), myObj.getFieldTypeMap())
                };
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.requestSender.sendPostRequest(requestUrl, data).then(function (resp) {
                            if (resp['status'] === 200 && !resp['data']) {
                                console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.RESPONSE_IS_INVALID).message);
                                throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.RESPONSE_IS_INVALID);
                            }
                            resolve(resp['data']['data']);
                        }).catch(function (err) {
                            if (_this.isErrResponseNotValid(err)) {
                                reject(err);
                                return;
                            }
                            reject(new AGConnectCloudDBException_1.AGConnectCloudDBException(err.response.data.errorCode));
                        });
                    })];
            });
        });
    };
    /**
     * developers use this API to insert/update specific records in a table.
     *
     * @param objectList single object/object list need to be insert/updated to database.
     * @returns promise with number.
     */
    CloudDBZone.prototype.executeUpsert = function (objectList) {
        var _this = this;
        var objects;
        var data;
        try {
            objects = this.objectListTransform(objectList);
            if (objects.length === 0) {
                console.log('ObjectList is empty when execute Upsert.');
                return Promise.resolve(0);
            }
            data = this.formData(objects);
        }
        catch (err) {
            return Promise.reject(err);
        }
        var requestUrl = this.URL_PREFIX + this.DATA_URL;
        return new Promise(function (resolve, reject) {
            _this.requestSender.sendPostRequest(requestUrl, data).then(function (resp) {
                if (resp['status'] === 200 && !resp['data']) {
                    console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.RESPONSE_IS_INVALID).message);
                    throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.RESPONSE_IS_INVALID);
                }
                resolve(resp['data']['upsertNumber']);
            }).catch(function (err) {
                if (_this.isErrResponseNotValid(err)) {
                    reject(err);
                    return;
                }
                reject(new AGConnectCloudDBException_1.AGConnectCloudDBException(err.response.data.errorCode));
            });
        });
    };
    CloudDBZone.checkInputData = function (objects) {
        if (objects.length > MAX_OBJECT_LIST_NUM) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DATA_SIZE_OVERFLOW).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DATA_SIZE_OVERFLOW);
        }
        Utils_1.Utils.checkSchemaAndDataSize(objects);
    };
    CloudDBZone.prototype.formData = function (objects) {
        var data = {
            "cloudDBZoneName": this.cloudDBZoneConfig.getCloudDBZoneName(),
            "objectTypeName": objects[0].constructor.name,
            "objects": Utils_1.Utils.serializeObjects(objects)
        };
        if (JSON.stringify(data).length > MAX_OBJECTS_CAPACITY) {
            console.warn('upsert data size is more than 20MB');
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DATA_SIZE_OVERFLOW);
        }
        return data;
    };
    /**
     * developers use this API to delete specific records in a table.
     *
     * @param objectList single object/object list need to be deleted from database.
     * @returns promise with number.
     */
    CloudDBZone.prototype.executeDelete = function (objectList) {
        var objects;
        var data;
        try {
            objects = this.objectListTransform(objectList);
            if (objects.length === 0) {
                console.log('ObjectList is empty when execute Delete.');
                return Promise.resolve(0);
            }
            data = this.formData(objects);
        }
        catch (err) {
            return Promise.reject(err);
        }
        var requestUrl = this.URL_PREFIX + this.DATA_URL;
        return this.objectDeleteResponse(requestUrl, data);
    };
    /**
     * developers use this API to delete all records in a table.
     *
     * @param clazz the object needs to be deleted from database.
     * @returns promise with number.
     */
    CloudDBZone.prototype.executeDeleteAll = function (clazz) {
        if (!clazz) {
            console.warn('the class is null');
            return Promise.reject(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_IS_NULL));
        }
        Utils_1.Utils.clazzCheck(clazz);
        var myObj = new clazz();
        var requestUrl = this.URL_PREFIX + this.ALL_DATA_URL;
        var data = {
            objectTypeName: myObj.getClassName(),
            cloudDBZoneName: this.cloudDBZoneConfig.getCloudDBZoneName()
        };
        return this.objectDeleteResponse(requestUrl, data);
    };
    /**
     * developers use this API to select a table by a cloudDBZoneQuery.
     *
     * @param cloudDBZoneQuery cloudDBZoneQuery user construct using api, such as where, equalTo...
     * @returns promise with object list queried from table.
     */
    CloudDBZone.prototype.executeQuery = function (cloudDBZoneQuery) {
        return __awaiter(this, void 0, void 0, function () {
            var clazz, myObj, requestUrl, fieldTypeMap, data;
            var _this = this;
            return __generator(this, function (_a) {
                if (!cloudDBZoneQuery) {
                    console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_CONDITION_IS_NULL).message);
                    return [2 /*return*/, Promise.reject(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_CONDITION_IS_NULL))];
                }
                clazz = cloudDBZoneQuery.getClazz();
                myObj = new clazz();
                this.verifyPaginationQuery(cloudDBZoneQuery, myObj);
                requestUrl = this.URL_PREFIX + this.QUERIES_URL;
                fieldTypeMap = myObj.getFieldTypeMap();
                data = {
                    objectTypeName: myObj.getClassName(),
                    cloudDBZoneName: this.cloudDBZoneConfig.getCloudDBZoneName(),
                    queryConditions: Utils_1.Utils.serializeQueryConditions(cloudDBZoneQuery.getQueryConditions(), fieldTypeMap)
                };
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.requestSender.sendPostRequest(requestUrl, data).then(function (resp) {
                            CloudDBZone.responseCheck(resp);
                            var deserializedObjects = Utils_1.Utils.deserializeObjects(resp['data']['data'], fieldTypeMap, cloudDBZoneQuery.getClazz());
                            var snapShort = new CloudDBZoneSnapshot_1.CloudDBZoneSnapshot(deserializedObjects);
                            resolve(snapShort);
                        }).catch(function (err) {
                            if (_this.isErrResponseNotValid(err)) {
                                reject(err);
                                return;
                            }
                            var errorCode = err.response.data.errorCode;
                            if (CloudDBErrorCode_1.CloudDBErrorCode.ERROR_CODE_PAGINATION_QUERY_FAILED_FOR_NO_INDEX == errorCode) {
                                reject(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_CODE_PAGINATION_QUERY_FAILED_FOR_NO_INDEX, "No such index for pagination query: ["
                                    + _this.getIndexByQueryCondition(cloudDBZoneQuery.getQueryConditions(), myObj.getPrimaryKeyList()) + "]"));
                                return;
                            }
                            reject(new AGConnectCloudDBException_1.AGConnectCloudDBException(errorCode));
                        });
                    })];
            });
        });
    };
    /**
     * developers use this API to get an average result from CloudDBZone by a cloudDBZoneQuery.
     *
     * @param cloudDBZoneQuery user construct a cloudDBZoneQuery using api, such as where, equalTo...
     * @param fieldName user choose one field to query.
     * @returns promise with number.
     */
    CloudDBZone.prototype.executeAverageQuery = function (cloudDBZoneQuery, fieldName) {
        var data = this.formAggregateQueryData(cloudDBZoneQuery, fieldName, "Average" /* AVG */);
        var responseKey = "average" /* AVG */ + '(' + fieldName + ')';
        return this.aggregateQueryResponse(data, responseKey);
    };
    /**
     * developers use this API to get a sum result from CloudDBZone by a cloudDBZoneQuery.
     *
     * @param cloudDBZoneQuery user construct a cloudDBZoneQuery using api, such as where, equalTo...
     * @param fieldName user choose one field to query.
     * @returns promise with number.
     */
    CloudDBZone.prototype.executeSumQuery = function (cloudDBZoneQuery, fieldName) {
        var data = this.formAggregateQueryData(cloudDBZoneQuery, fieldName, "Sum" /* SUM */);
        var responseKey = "sum" /* SUM */ + '(' + fieldName + ')';
        return this.aggregateQueryResponse(data, responseKey);
    };
    /**
     * developers use this API to get a maximum result from CloudDBZone by a cloudDBZoneQuery.
     *
     * @param cloudDBZoneQuery user construct a cloudDBZoneQuery using api, such as where, equalTo...
     * @param fieldName user choose one field to query.
     * @returns promise with number.
     */
    CloudDBZone.prototype.executeMaximumQuery = function (cloudDBZoneQuery, fieldName) {
        var data = this.formAggregateQueryData(cloudDBZoneQuery, fieldName, "Max" /* MAX */);
        var responseKey = "maximum" /* MAX */ + '(' + fieldName + ')';
        return this.aggregateQueryResponse(data, responseKey);
    };
    /**
     * developers use this API to get minimum result from CloudDBZone by a cloudDBZoneQuery.
     *
     * @param cloudDBZoneQuery user construct a cloudDBZoneQuery using api, such as where, equalTo...
     * @param fieldName user choose one field to query.
     * @returns promise with number.
     */
    CloudDBZone.prototype.executeMinimalQuery = function (cloudDBZoneQuery, fieldName) {
        var data = this.formAggregateQueryData(cloudDBZoneQuery, fieldName, "Min" /* MIN */);
        var responseKey = "minimum" /* MIN */ + '(' + fieldName + ')';
        return this.aggregateQueryResponse(data, responseKey);
    };
    /**
     * developers use this API to get count result from CloudDBZone by a cloudDBZoneQuery.
     *
     * @param cloudDBZoneQuery user construct a cloudDBZoneQuery using api, such as where, equalTo...
     * @param fieldName user choose our field to query.
     * @returns promise with number.
     */
    CloudDBZone.prototype.executeCountQuery = function (cloudDBZoneQuery, fieldName) {
        var data = this.formAggregateQueryData(cloudDBZoneQuery, fieldName, "Count" /* COUNT */);
        var responseKey = "count" /* COUNT */ + '(' + fieldName + ')';
        return this.aggregateQueryResponse(data, responseKey);
    };
    /**
     * developers use this API to execute a transaction in cloud size.
     *
     * @param transactionFunction the transactionFunction.
     * @returns promise with boolean.
     */
    CloudDBZone.prototype.runTransaction = function (transactionFunction) {
        if (!transactionFunction) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_IS_NULL).message);
            return Promise.reject(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_IS_NULL));
        }
        return this.getCloudDBZoneResult(transactionFunction);
    };
    CloudDBZone.prototype.getCloudDBZoneResult = function (func) {
        return __awaiter(this, void 0, void 0, function () {
            var transaction, isTransactionResult, count;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        transaction = new Transaction_1.Transaction(this);
                        isTransactionResult = false;
                        count = 0;
                        _a.label = 1;
                    case 1:
                        if (!(!isTransactionResult && count < MAX_FAILED_COUNT)) return [3 /*break*/, 7];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, , 5, 6]);
                        if (typeof func.apply != 'function') {
                            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.CLASS_INVALID).message);
                            return [2 /*return*/, Promise.reject(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.CLASS_INVALID))];
                        }
                        return [4 /*yield*/, func.apply(transaction)];
                    case 3:
                        isTransactionResult = _a.sent();
                        if (!isTransactionResult) {
                            console.warn('user function return false, transaction failed.');
                            return [2 /*return*/, false];
                        }
                        CloudDBZone.verifyTransaction(transaction);
                        return [4 /*yield*/, this.getTransactionResult(transaction)];
                    case 4:
                        isTransactionResult = _a.sent();
                        count++;
                        return [3 /*break*/, 6];
                    case 5:
                        transaction.release();
                        return [7 /*endfinally*/];
                    case 6: return [3 /*break*/, 1];
                    case 7: return [2 /*return*/, isTransactionResult];
                }
            });
        });
    };
    CloudDBZone.verifyTransaction = function (transaction) {
        var e_1, _a;
        var uploadSize = 0;
        try {
            for (var _b = __values(transaction.transactionList), _c = _b.next(); !_c.done; _c = _b.next()) {
                var operation = _c.value;
                if (operation.operationType === Transaction_1.OperationType.UPSERT
                    || operation.operationType === Transaction_1.OperationType.DELETE) {
                    uploadSize = uploadSize + operation.objects.length;
                    if (uploadSize > MAX_OBJECT_LIST_NUM) {
                        console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DATA_SIZE_OVERFLOW).message);
                        throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DATA_SIZE_OVERFLOW);
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (transaction.needVerifyObjectsList.length > MAX_OBJECT_LIST_NUM) {
            console.warn('Too many query results in the transaction.');
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DATA_SIZE_OVERFLOW);
        }
    };
    CloudDBZone.prototype.getTransactionResult = function (transaction) {
        return __awaiter(this, void 0, void 0, function () {
            var requestUrl, data;
            var _this = this;
            return __generator(this, function (_a) {
                if (transaction.isTransactionEmpty()) {
                    console.warn('nothing need to execute in this transaction, transaction succeed.');
                    return [2 /*return*/, Promise.resolve(true)];
                }
                requestUrl = this.URL_PREFIX + this.TRANSACTION_URL;
                data = {
                    cloudDBZoneName: this.cloudDBZoneConfig.getCloudDBZoneName(),
                    needVerifyObjectsList: transaction.needVerifyObjectsList,
                    transactionList: transaction.transactionList
                };
                if (JSON.stringify(data).length > MAX_OBJECTS_CAPACITY) {
                    console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DATA_SIZE_OVERFLOW).message);
                    return [2 /*return*/, Promise.reject(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DATA_SIZE_OVERFLOW))];
                }
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.requestSender.sendPostRequest(requestUrl, data).then(function (resp) {
                            if (resp['status'] === 200) {
                                resolve(true);
                            }
                        }).catch(function (err) {
                            if (_this.isErrResponseNotValid(err)) {
                                reject(err);
                                return;
                            }
                            var errorCode = err.response.data.errorCode;
                            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(errorCode).message);
                            if (errorCode == CloudDBErrorCode_1.CloudDBErrorCode.PARAMETER_INVALID) {
                                reject(new AGConnectCloudDBException_1.AGConnectCloudDBException(errorCode));
                                return;
                            }
                            resolve(false);
                        });
                    })];
            });
        });
    };
    CloudDBZone.prototype.verifyPaginationQuery = function (cloudDBZoneQuery, myObject) {
        var _this = this;
        if (!this.isPaginationQuery(cloudDBZoneQuery.getQueryConditions())) {
            return;
        }
        var allOrderBys = this.getAllOrderBys(cloudDBZoneQuery.getQueryConditions());
        var orderByFieldNameSet = allOrderBys.get(this.KEY_ORDERBY_FIELD_NAME);
        var orderByDirectionArray = allOrderBys.get(this.KEY_ORDERBY_DIRECTION);
        if (orderByDirectionArray.includes("asc" /* ASCEND */) && orderByDirectionArray.includes("desc" /* DESCEND */)) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ORDER_BY_ONLY_SUPPORT_ONE_DIRECTION).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ORDER_BY_ONLY_SUPPORT_ONE_DIRECTION);
        }
        if (orderByFieldNameSet.size !== orderByDirectionArray.length) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATION_ORDER_BY_HAS_DUPLICATE_FIELD).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATION_ORDER_BY_HAS_DUPLICATE_FIELD);
        }
        var hasSorted = false;
        cloudDBZoneQuery.getQueryConditions().forEach(function (queryCondition) {
            var conditionType = queryCondition.conditionType;
            if (Utils_1.Utils.isAggregateType(conditionType)) {
                console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATE_NOT_SUPPORT_AGGREGATE));
                throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATE_NOT_SUPPORT_AGGREGATE);
            }
            if ("OrderBy" /* ORDER_BY */ !== conditionType && "EqualTo" /* EQUAL_TO */ !== conditionType
                && "Limit" /* LIMIT */ !== conditionType && !Utils_1.Utils.isPaginationType(conditionType)) {
                console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATE_QUERY_INPUT_IS_ONLY_SUPPORTED).message);
                throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATE_QUERY_INPUT_IS_ONLY_SUPPORTED);
            }
            if ("EqualTo" /* EQUAL_TO */ === conditionType) {
                if (hasSorted) {
                    console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.EQUAL_TO_NOT_BEFORE_ORDER_BY).message);
                    throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.EQUAL_TO_NOT_BEFORE_ORDER_BY);
                }
                _this.checkPaginationEqualTo(queryCondition, myObject, orderByFieldNameSet);
            }
            if ("OrderBy" /* ORDER_BY */ === conditionType) {
                hasSorted = true;
                CloudDBZone.checkPaginationOrderBy(queryCondition, myObject);
            }
        });
    };
    CloudDBZone.prototype.checkPaginationEqualTo = function (queryCondition, myObj, orderByFieldNameSet) {
        var fieldName = queryCondition.fieldName;
        var fieldTypeMap = myObj.getFieldTypeMap();
        if (myObj.getPrimaryKeyList().includes(fieldName)) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATE_EQUAL_TO_NOT_SUPPORT_PRIMARY_KEY).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATE_EQUAL_TO_NOT_SUPPORT_PRIMARY_KEY);
        }
        if (orderByFieldNameSet.has(fieldName)) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATE_EQUAL_TO_FIELD_IS_SAME_WITH_ORDER_BY).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATE_EQUAL_TO_FIELD_IS_SAME_WITH_ORDER_BY);
        }
        if (fieldTypeMap.get(fieldName) === FieldType_1.FieldType.Text) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATE_EQUAL_TO_NOT_SUPPORT_TEXT).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATE_EQUAL_TO_NOT_SUPPORT_TEXT);
        }
    };
    CloudDBZone.checkPaginationOrderBy = function (queryCondition, myObj) {
        var fieldName = queryCondition.fieldName;
        var fieldTypeMap = myObj.getFieldTypeMap();
        var fieldType = fieldTypeMap.get(fieldName);
        if (fieldType === FieldType_1.FieldType.ByteArray || fieldType === FieldType_1.FieldType.Text || fieldType === FieldType_1.FieldType.Boolean) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATE_ORDER_BY_NOT_SUPPORT_TYPE).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATE_ORDER_BY_NOT_SUPPORT_TYPE);
        }
    };
    CloudDBZone.prototype.getIndexByQueryCondition = function (queryConditions, primaryKeyList) {
        var indexList = [];
        queryConditions.forEach(function (queryCondition) {
            var conditionType = queryCondition['conditionType'];
            if ((conditionType !== "OrderBy" /* ORDER_BY */) && (conditionType !== "EqualTo" /* EQUAL_TO */)) {
                return;
            }
            var fieldName = queryCondition['fieldName'];
            if (fieldName) {
                indexList.push(fieldName);
            }
        });
        primaryKeyList.forEach(function (primaryKey) {
            if (!indexList.includes(primaryKey)) {
                indexList.push(primaryKey);
            }
        });
        return indexList;
    };
    CloudDBZone.checkAggregateQueryInput = function (myObj, fieldName, aggregateType) {
        if (!fieldName) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.AGGREGATE_QUERY_FIELD_NAME_IS_NULL).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.AGGREGATE_QUERY_FIELD_NAME_IS_NULL);
        }
        var fieldTypeMap = myObj.getFieldTypeMap();
        if (!fieldTypeMap.has(fieldName)) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.AGGREGATE_QUERY_FIELD_NAME_DO_NOT_EXIST).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.AGGREGATE_QUERY_FIELD_NAME_DO_NOT_EXIST);
        }
        if (myObj.getEncryptedFieldList().includes(fieldName) && aggregateType != "Count" /* COUNT */) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ENCRYPTED_FIELD_NOT_SUPPORT_QUERY).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ENCRYPTED_FIELD_NOT_SUPPORT_QUERY);
        }
        var fieldType = fieldTypeMap.get(fieldName);
        if (aggregateType !== "Count" /* COUNT */ && !Utils_1.Utils.isNumericField(fieldType)) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.AGGREGATE_QUERY_FIELD_TYPE_IS_NOT_NUMERIC).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.AGGREGATE_QUERY_FIELD_TYPE_IS_NOT_NUMERIC);
        }
    };
    CloudDBZone.responseCheck = function (response) {
        if (!response || !response['status']) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.RESPONSE_IS_INVALID).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.RESPONSE_IS_INVALID);
        }
        if (response['status'] === 200) {
            if (!response['data'] || !response['data']['data']) {
                console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.RESPONSE_IS_INVALID).message);
                throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.RESPONSE_IS_INVALID);
            }
        }
    };
    CloudDBZone.aggregateResponseCheck = function (response) {
        CloudDBZone.responseCheck(response);
        if (!response['data']['data'][0]) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.RESPONSE_IS_INVALID).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.RESPONSE_IS_INVALID);
        }
    };
    CloudDBZone.prototype.getAllOrderBys = function (queryConditions) {
        var _this = this;
        var allOrderBys = new Map();
        allOrderBys.set(this.KEY_ORDERBY_FIELD_NAME, new Set());
        allOrderBys.set(this.KEY_ORDERBY_DIRECTION, []);
        queryConditions.forEach(function (queryCondition) {
            if (queryCondition.conditionType === "OrderBy" /* ORDER_BY */) {
                var orderBySet = allOrderBys.get(_this.KEY_ORDERBY_FIELD_NAME);
                orderBySet.add(queryCondition.fieldName);
                var orderByArray = allOrderBys.get(_this.KEY_ORDERBY_DIRECTION);
                orderByArray.push(queryCondition.value);
            }
        });
        return allOrderBys;
    };
    CloudDBZone.prototype.isPaginationQuery = function (queryConditions) {
        var isPaginationQuery = false;
        queryConditions.forEach(function (queryCondition) {
            if (Utils_1.Utils.isPaginationType(queryCondition.conditionType)) {
                if (isPaginationQuery) {
                    console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATE_QUERY_INPUT_IS_MORE_THAN_ONE).message);
                    throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATE_QUERY_INPUT_IS_MORE_THAN_ONE);
                }
                isPaginationQuery = true;
            }
        });
        return isPaginationQuery;
    };
    CloudDBZone.prototype.objectListTransform = function (objectList) {
        if (!objectList) {
            var exception = new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_IS_NULL);
            console.warn(exception.message);
            throw exception;
        }
        var objects;
        if (Utils_1.Utils.isArray(objectList)) {
            objects = objectList;
        }
        else {
            objects = [objectList];
        }
        for (var i = 0; i < objects.length; i++) {
            if (objects[i] == null) {
                console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_IS_NULL).message);
                throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_IS_NULL);
            }
        }
        CloudDBZone.checkInputData(objects);
        return objects;
    };
    CloudDBZone.prototype.aggregateQueryResponse = function (data, responseKey) {
        var _this = this;
        var requestUrl = this.URL_PREFIX + this.QUERIES_URL;
        return new Promise(function (resolve, reject) {
            _this.requestSender.sendPostRequest(requestUrl, data).then(function (resp) {
                CloudDBZone.aggregateResponseCheck(resp);
                resolve(resp['data']['data'][0][responseKey]);
            }).catch(function (err) {
                if (_this.isErrResponseNotValid(err)) {
                    reject(err);
                    return;
                }
                reject(new AGConnectCloudDBException_1.AGConnectCloudDBException(err.response.data.errorCode));
            });
        });
    };
    CloudDBZone.prototype.formAggregateQueryData = function (cloudDBZoneQuery, fieldName, aggregateType) {
        if (!cloudDBZoneQuery) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.AGGREGATE_QUERY_CLOUDDB_ZONE_IS_NULL).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.AGGREGATE_QUERY_CLOUDDB_ZONE_IS_NULL);
        }
        var clazz = cloudDBZoneQuery.getClazz();
        var myObj = new clazz();
        CloudDBZone.checkAggregateQueryInput(myObj, fieldName, aggregateType);
        var queryConditions = cloudDBZoneQuery.getQueryConditions();
        queryConditions.push({
            fieldName: fieldName,
            conditionType: aggregateType
        });
        return {
            objectTypeName: myObj.getClassName(),
            cloudDBZoneName: this.cloudDBZoneConfig.getCloudDBZoneName(),
            queryConditions: queryConditions
        };
    };
    return CloudDBZone;
}(CloudDBService_1.CloudDBService));
exports.CloudDBZone = CloudDBZone;
