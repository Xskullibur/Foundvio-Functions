"use strict";
/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudDBService = void 0;
var CloudDBErrorCode_1 = require("../exception/CloudDBErrorCode");
var AGConnectCloudDBException_1 = require("../exception/AGConnectCloudDBException");
var ExceptionTranslate_1 = require("../exception/ExceptionTranslate");
var HttpsCommunicator_1 = require("../communicator/https/HttpsCommunicator");
/**
* The base class of cloudDB service.
*
* @author linhongyi [linhongyi2@huawei.com]
* @since 2020-12-4
*/
var CloudDBService = /** @class */ (function () {
    /**
     * Constructor of CloudDB Service.
     *
     * @param agcClient client from Agc.
     * @throws AGConnectCloudDBException if agcClient is null.
     */
    function CloudDBService(agcClient) {
        this.URL_PREFIX = 'api/clouddb/clouddbservice/';
        if (!agcClient) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_IS_NULL).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_IS_NULL);
        }
        this.agcClient = agcClient;
        this.requestSender = new HttpsCommunicator_1.HttpsCommunicator(this.agcClient);
    }
    /**
     * This method is used to send Delete request and parse the response.
     *
     * @param requestUrl the request url.
     * @param data the data need to send.
     * @returns the number of recprds that being deleted.
     * @throws AGConnectCloudDBException if response is invalid.
     */
    CloudDBService.prototype.objectDeleteResponse = function (requestUrl, data) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.requestSender.sendDeleteRequest(requestUrl, data).then(function (resp) {
                if (resp['status'] === 200 && !resp['data']) {
                    console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.RESPONSE_IS_INVALID).message);
                    throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.RESPONSE_IS_INVALID);
                }
                resolve(resp['data']['delNumber']);
            }).catch(function (err) {
                if (_this.isErrResponseNotValid(err)) {
                    reject(err);
                    return;
                }
                reject(new AGConnectCloudDBException_1.AGConnectCloudDBException(err.response.data.errorCode));
            });
        });
    };
    /**
     * This method is used to check whether the error response is valid.
     *
     * @param err the response of error.
     * @returns boolean value of whether the error response is valid.
     */
    CloudDBService.prototype.isErrResponseNotValid = function (err) {
        if (err.response == null || err.response.data == null || err.response.data.errorCode == null
            || !ExceptionTranslate_1.getErrorMessage(err.response.data.errorCode)) {
            return true;
        }
        console.warn('Get cloud error code =>', err.response.data.errorCode);
        return false;
    };
    return CloudDBService;
}());
exports.CloudDBService = CloudDBService;
